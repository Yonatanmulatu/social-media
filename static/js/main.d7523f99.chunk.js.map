{"version":3,"sources":["logo.svg","MyContext.js","components/CommentList.js","components/AddComment.js","components/Post.js","components/AddPostForm.js","components/Posts.js","App.js","serviceWorker.js","MyProvider.js","index.js"],"names":["module","exports","MyContext","createContext","CommentList","props","data","useContext","DeletePostHandler","DeleteCommentHandler","display","userId","onClick","console","log","id","sample","comments","map","comment","title","AddComment","useState","value","setValue","AddCommentHandler","name","placeholder","onChange","event","target","Post","body","AddPostForm","AddPostHandler","type","Posts","previousPosts","previousPost","to","path","App","state","uuid","newPosts","push","setState","updatedPosts","filter","postId","commentId","className","exact","this","Component","Boolean","window","location","hostname","match","MyProvider","changeSampleValue","Provider","children","React","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7523f99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React, { createContext } from 'react';\n\nconst MyContext = createContext();\n\n\n\nexport default MyContext;","import React, {useContext} from 'react';\nimport MyContext from '../MyContext';\n\nconst CommentList = (props) => {\n    let data = useContext(MyContext);\n    let {DeletePostHandler} = useContext(MyContext);\n    let {DeleteCommentHandler} = useContext(MyContext);\n    // state= {\n    //     value: \"\",\n    // }\n\n    const DeletePostBtnClickHandler = () => {\n        console.log(props.id);\n        DeletePostHandler(props.id);\n    }\n    \n\n        let display = \"\";\n  \n        if (props.userId == 1) {\n            display = <div>\n                    <div><strong>Comments</strong></div>\n                    <button onClick={DeletePostBtnClickHandler}>Delete Post</button>\n                        </div>\n        }\n            \n        return (\n            <div>\n            {data.sample}\n            {\n                props.comments.map(comment => {\n                return <div>\n                            {comment.title}\n                            {\n                        comment.userId == 1 ?\n                         <button onClick={() => DeleteCommentHandler(props.id, comment.id)}>Delete Comment</button>\n                        : \"\"\n                            }\n                       </div>\n                })\n            }\n            {display}\n            </div>\n\n        )\n}\n\nexport default CommentList;\n\n\n","import React, { useState, useContext } from 'react';\nimport MyContext from '../MyContext';\n\nconst AddComment = props => {\n    const [value, setValue] = useState('');\n    let {AddCommentHandler} = useContext(MyContext);\n\n    const AddCommentBtnClickHandler = () => {\n        AddCommentHandler(props.id, value);\n    }\n\n        return (\n            <div>\n                {props.comments}\n                <div><strong>Comments</strong></div>\n                <div>\n                    <input name=\"comment\" placeholder=\"Add a new comment\" onChange={(event) => setValue(event.target.value)}/>\n                </div>\n                <button onClick={AddCommentBtnClickHandler}> Add Comment</button> \n            </div>\n        )\n}\n\nexport default AddComment;","import React, { useState } from 'react';\nimport CommentList from './CommentList';\nimport AddComment from './AddComment';\nimport { Router, Link, Route} from 'react-router-dom';\n\nconst Post = props => {\n\n\n        return (\n            <div>\n                <h4>{props.title}</h4>\n                <p>{props.body}</p>\n                <CommentList comments = {props.comments} DeletePostHandler = {props.DeletePostHandler} id={props.id} userId={props.userId} DeleteCommentHandler = {props.DeleteCommentHandler}/>\n                <AddComment AddCommentHandler = {props.AddCommentHandler} id={props.id}/>\n            </div>\n        )\n\n}\n\nexport default Post;","import React, { useState, useContext } from 'react';\nimport MyContext from '../MyContext';\n\nconst AddPostForm = props => {\n    const [value, setValue] = useState('');\n\n    let {AddPostHandler} = useContext(MyContext);\n\n        return (\n            <div>\n                <span>\n                    <input \n                        type=\"text\"\n                        onChange={(event) => setValue(event.target.value)} \n                        value={value}\n                    />\n                </span>\n                <button onClick={AddPostHandler}>POST</button> \n\n\n            </div>\n        )\n}\n\nexport default AddPostForm;\n\n\n\n// addTaskHandler = () => {\n//     const tasks = [...this.state.tasks];\n//     tasks.push({\n//       id: uuidv4(),\n//       title: this.state.newTask,\n//       completed: false\n//     });\n\n//     this.setState({\n//       tasks,\n//       newTask: ''\n//     })\n//   };\n\n//   inputNewTaskHandler = (event) => {\n//      this.setState({\n//        newTask: event.target.value,\n//      });\n//   };","import React, { useContext } from \"react\";\nimport MyContext from '../MyContext';\nimport { Router, Link, Route} from 'react-router-dom';\nimport Post from './Post';\n\n\nconst Posts = props => {\n\n    let {previousPosts} = useContext(MyContext);\n\n        return (\n            <div>\n            {\n                previousPosts.map(previousPost => {\n                return <div>\n                            <Link to={\"/posts/\"+previousPost.id}>Post</Link>\n                            <Route path={\"/posts/\"+previousPost.id}>\n                            <Post title = {previousPost.title} body = {previousPost.body} comments = {previousPost.comments} id={previousPost.id} userId={previousPost.userId}/>\n                            </Route>\n                        </div>\n                })\n            }\n            </div>\n        )\n}\n\nexport default Posts;","import React, { Component, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Post from './components/Post';\nimport AddPostForm from './components/AddPostForm';\nimport CommentList from './components/CommentList';\nimport AddComment from './components/AddComment';\nimport {uuid} from 'uuidv4';\nimport { Router, Link, Route} from 'react-router-dom';\nimport Posts from './components/Posts';\n\nclass App extends Component {\n\n  state = {\n    sample: \"hello world\",\n    previousPosts: [\n      {\n        \"userId\": 1,\n        \"id\": uuid(),\n        \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n        \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\",\n        comments: [{id: uuid(),\"title\" : \"comment 1\", userId: 1},\n                   {id: uuid(),\"title\" : \"second comment\", userId: 1}] \n      },\n      {\n        \"userId\": 2,\n        \"id\": 2,\n        \"title\": \"qui est esse\",\n        \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\",\n        comments: [] \n      },\n      {\n        \"userId\": 3,\n        \"id\": 3,\n        \"title\": \"ea molestias quasi exercitationem repellat qui ipsa sit aut\",\n        \"body\": \"et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut\",\n        comments: [] \n      },\n      {\n        \"userId\": 4,\n        \"id\": 4,\n        \"title\": \"eum et est occaecati\",\n        \"body\": \"ullam et saepe reiciendis voluptatem adipisci\\nsit amet autem assumenda provident rerum culpa\\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\\nquis sunt voluptatem rerum illo velit\",\n        comments: [] \n      },\n      {\n        \"userId\": 5,\n        \"id\": 5,\n        \"title\": \"nesciunt quas odio\",\n        \"body\": \"repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque\",\n        comments: [] \n      }\n    ]\n  }\n\n  AddPostHandler = () => {\n    const newPosts = [...this.state.previousPosts]\n    newPosts.push({\n        userId: 1,\n        id: 1,\n        title: \"this.state.value\",\n        body:\"\",\n        comments:[]\n    })\n    this.setState ({\n      previousPosts: newPosts,\n    })\n  }\n\n  AddCommentHandler = (id, value) => {\n    let updatedPosts = [...this.state.previousPosts]\n    updatedPosts = updatedPosts.map(previousPost => {\n      if(previousPost.id == id) {\n        previousPost.comments.push({id: uuid(),\"title\" : value, userId: 1})\n      }\n      return previousPost;\n    })\n    this.setState ({\n      previousPosts: updatedPosts,\n    })\n  }\n\n  DeletePostHandler = (id) => {\n      let newPosts = this.state.previousPosts.filter(previousPost => {\n      return previousPost.id !== id \n      });\n      this.setState ({\n        previousPosts: newPosts\n      })\n    }\n  \n  DeleteCommentHandler = (postId, commentId) => {\n    console.log(postId, commentId);\n    let newPosts = [...this.state.previousPosts]\n    newPosts = newPosts.map(previousPost => {\n      if(postId == previousPost.id) {\n        previousPost.comments = previousPost.comments.filter(comment => {\n          return commentId !== comment.id\n        });\n      }\n      return previousPost\n    });\n    this.setState ({\n      previousPosts: newPosts\n    });\n  }\n  \n  render () {\n    return (\n    \n        <div className=\"App\">\n          <Link to=\"/\">Home |</Link> \n          <Link to=\"/posts\">Post |</Link>\n          <Link to=\"/addPost\">Create Post</Link>\n          <Route path=\"/\" exact>\n            <h2>Home Page</h2>\n            <p>lorem ipsum...</p>\n          </Route>\n\n          <Route path=\"/addpost\">\n            <AddPostForm AddPostHandler={this.AddPostHandler}/>\n          </Route>\n\n          <Route path=\"/posts\">\n            <Posts />\n          </Route>\n        </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {uuid} from 'uuidv4';\nimport MyContext from './MyContext';\n\n\nclass MyProvider extends React.Component {\n\n    AddPostHandler = () => {\n        const newPosts = [...this.state.previousPosts]\n        newPosts.push({\n            userId: 1,\n            id: 1,\n            title: \"this.state.value\",\n            body:\"\",\n            comments:[]\n        })\n        this.setState ({\n            previousPosts: newPosts,\n        })\n        }\n\n    DeletePostHandler = (id) => {\n        let newPosts = this.state.previousPosts.filter(previousPost => {\n        return previousPost.id !== id \n        });\n        this.setState ({\n            previousPosts: newPosts\n        })\n    }\n\n    AddCommentHandler = (id, value) => {\n        let updatedPosts = [...this.state.previousPosts]\n        updatedPosts = updatedPosts.map(previousPost => {\n          if(previousPost.id == id) {\n            previousPost.comments.push({id: uuid(),\"title\" : value, userId: 1})\n          }\n          return previousPost;\n        })\n        this.setState ({\n          previousPosts: updatedPosts,\n        })\n    }\n\n    DeleteCommentHandler = (postId, commentId) => {\n        console.log(postId, commentId);\n        let newPosts = [...this.state.previousPosts]\n        newPosts = newPosts.map(previousPost => {\n          if(postId == previousPost.id) {\n            previousPost.comments = previousPost.comments.filter(comment => {\n              return commentId !== comment.id\n            });\n          }\n          return previousPost\n        });\n        this.setState ({\n          previousPosts: newPosts\n        });\n    }\n\n    state = {\n        AddPostHandler: this.AddPostHandler,\n        DeletePostHandler: this.DeletePostHandler,\n        AddCommentHandler: this.AddCommentHandler,\n        DeleteCommentHandler: this.DeleteCommentHandler,\n\n        sample: \"hello world\",\n        changeSampleValue: this.changeSampleValue,\n        previousPosts: [\n            {\n            \"userId\": 1,\n            \"id\": uuid(),\n            \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n            \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\",\n            comments: [{id: uuid(),\"title\" : \"comment 1\", userId: 1},\n                        {id: uuid(),\"title\" : \"second comment\", userId: 1}] \n            },\n            {\n            \"userId\": 2,\n            \"id\": 2,\n            \"title\": \"qui est esse\",\n            \"body\": \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\",\n            comments: [] \n            },\n            {\n            \"userId\": 3,\n            \"id\": 3,\n            \"title\": \"ea molestias quasi exercitationem repellat qui ipsa sit aut\",\n            \"body\": \"et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut\",\n            comments: [] \n            },\n            {\n            \"userId\": 4,\n            \"id\": 4,\n            \"title\": \"eum et est occaecati\",\n            \"body\": \"ullam et saepe reiciendis voluptatem adipisci\\nsit amet autem assumenda provident rerum culpa\\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\\nquis sunt voluptatem rerum illo velit\",\n            comments: [] \n            },\n            {\n            \"userId\": 5,\n            \"id\": 5,\n            \"title\": \"nesciunt quas odio\",\n            \"body\": \"repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque\",\n            comments: [] \n            }\n        ]\n          }\n\n\n    changeSampleValue = () => {\n        this.setState({\n            sample: \"world hello\"\n        });\n    }\n    render() {\n        return(\n            <MyContext.Provider value={this.state}>\n                {this.props.children}\n            </MyContext.Provider>\n        );\n    }\n}\n\nexport default MyProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router, Link, BrowserRouter } from 'react-router-dom';\nimport MyProvider from './MyProvider';\n\nReactDOM.render(\n  <MyProvider>\n    <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </React.StrictMode>\n  </MyProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}